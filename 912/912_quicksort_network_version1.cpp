// 以下代码来自https://blog.csdn.net/liuchen1206/article/details/6954074
// 用挖坑法实现快排，所谓挖坑是指将数组中某个index上的值赋值给另一个数时，这个index将留下一个坑，这时可以将其它值填充在这个坑中.
// 详见上面的csdn链接.
// 评论：比较透彻了，其实直接交换也可以完成，但是使用挖坑节省了很多空间
void quickSort(int s[], int l, int r)
{
	if (l< r)
	{
		int i = l, j = r, x = s[l];
		while (i < j)
		{
			while(i < j && s[j]>= x) // 从右向左找第一个小于x的数
				j--;
			if(i < j)
				s[i++] = s[j];
			while(i < j && s[i]< x) // 从左向右找第一个大于等于x的数
				i++;
			if(i < j)
				s[j--] = s[i];
		}
		s[i] = x;
		quickSort(s, l, i - 1); // 递归调用
		quickSort(s, i + 1, r);
	}
}

--------------------------------------------------
1, 2, 1, 5, 0, 0, 4, 2 ---> (x = s[l] ---> x = 1)
    1, 2, 1, 5, 0, 0, 4, 2 ---> (s[i++] = s[j]) --->
    0, 2, 1, 5, 0, 0, 4, 2 ---> (s[j--] = s[i]) --->
    0, 2, 1, 5, 0, 2, 4, 2 --->
    -----------------------
    0, 2, 1, 5, 0, 2, 4, 2 --->
    0, 0, 1, 5, 0, 2, 4, 2 --->
    0, 0, 1, 5, 1, 2, 4, 2 --->
    -----------------------
